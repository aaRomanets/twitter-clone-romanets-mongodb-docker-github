import React from 'react';
import classNames from 'classnames';
import Avatar from "@material-ui/core/Avatar";
import Alert from "@material-ui/lab/Alert";
import Button from "@material-ui/core/Button";
import CircularProgress from "@material-ui/core/CircularProgress";
import TextareaAutosize from '@material-ui/core/TextareaAutosize';

import { useHomeStyles } from "../pages/theme";
import { useDispatch, useSelector } from 'react-redux';
import { fetchAddTweet, setAddFormState } from '../store/ducks/tweets/actionCreators';
import { selectAddFormState } from '../store/ducks/tweets/selectors';
import { AddFormState } from '../store/ducks/tweets/contracts/state';
import { UploadImages } from './UploadImages';
import { uploadImage } from '../utils/uploadImage';

interface AddTweetFormProps {
    classes: ReturnType<typeof useHomeStyles>;
    maxRows?: number;
}

//–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —Ç–≤–∏—Ç–µ
const MAX_LENGTH = 280;

//–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
export interface ImageObj {
    blobUrl: string;
    file: File;
}

export const AddTweetForm: React.FC<AddTweetFormProps> = ({
    classes,
    maxRows
}: AddTweetFormProps): React.ReactElement => {
    const dispatch = useDispatch();
    //—Ç–µ–∫—Å—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ–º–æ–≥–æ —Ç–≤–∏—Ç–∞ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ —Ç–≤–∏—Ç–∞ 280 —Å–∏–º–≤–æ–ª–æ–≤)
    const [text, setText] = React.useState<string>('');
    //–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ä–º–∏—Ä—É–µ–º–æ–≥–æ —Ç–≤–∏—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã 
    const [images, setImages] = React.useState<ImageObj[]>([]);

    //—Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–≤–∏—Ç–∞ –ø–æ –¥–∞–Ω–Ω—ã–º —Ñ–æ—Ä–º—ã
    const addFormState = useSelector(selectAddFormState);

    //–∫–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞ —É–∂–µ –≤–≤–µ–¥–µ–Ω –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é 
    //–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É —á–∏—Å–ª—É —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ–º–æ–≥–æ —Ç–≤–∏—Ç–∞
    const textLimitPercent = (text.length / 280) * 100; 
    //—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ–º–æ–≥–æ —Ç–≤–∏—Ç–∞ –µ—â–µ –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏
    const textCount = MAX_LENGTH - text.length;

    const handleChangeTextArea = (e: React.FormEvent<HTMLTextAreaElement>): void => {
        if (e.currentTarget) {
            //—Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ç–≤–∏—Ç–∞
            setText(e.currentTarget.value)
        }
    }

    const handleClickAddTweet = async (): Promise<void> => {
        let result = [];
        
        //—Ç–≤–∏—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø–æ –¥–∞–Ω–Ω—ã–º —Ñ–æ—Ä–º—ã
        dispatch(setAddFormState(AddFormState.LOADING))
        
        //—Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–≤–∏—Ç–∞
        for (let i = 0; i < images.length; i++) {
            const file = images[i].file;
            //–ø–æ–º–µ—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ cloudinary —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
            const {url} = await uploadImage(file);
            result.push(url);
        }
        
        //–¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–≤–∏—Ç–∞ –ø–æ –µ–≥–æ —Ç–µ–∫—Å—Ç—É –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        dispatch(fetchAddTweet({ text, images: result }));
        
        //–ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª–µ —Ç–µ–∫—Å—Ç–∞ —Ç–≤–∏—Ç–∞ –æ–±–Ω—É–ª—è–µ–º
        setText('');
        
        //–ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–≤–∏—Ç–∞ –æ—á–∏—â–∞–µ–º
        setImages([]);
    };

    return (
        <div>
            <div className={classes.addFormBody}>
                {/*–ê–≤–∞—Ç–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*/}
                <Avatar
                    className={classes.tweetAvatar}
                    alt={'User avatar UserAvatar'} 
                />
                {/*–ü–æ–ª–µ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ —Ç–≤–∏—Ç–∞ */}
                <TextareaAutosize
                    onChange={handleChangeTextArea}
                    className={classes.addFormTextarea}
                    placeholder="What is going on?" 
                    value={text}
                    rowsMax={maxRows}
                />
            </div>
            <div className={classes.addFormBottom}>
                <div className={classNames(classes.tweetFooter, classes.addFormBottomActions)}>
                    {/*–ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–≤–∏—Ç–∞*/}
                    <UploadImages images={images} onChangeImages={setImages} />
                </div>
                <div className={classes.addFormBottomRight}>
                    {text && (
                        <>
                            {/*–≠—Ç–∞ –¥–∏–∞–≥—Ä–∞–º–º–∞ –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —Å–∫–æ–ª—å–∫–æ –µ—â–µ —Å–∏–º–≤–æ–ª–æ–≤ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –≤ —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–≤–∏—Ç–∞*/}
                            <span>{textCount}</span>
                            <div className={classes.addFormCircleProgress}>
                                <CircularProgress 
                                    variant="static"
                                    size={20}
                                    thickness={5}
                                    value={text.length >= MAX_LENGTH ? 100 : textLimitPercent}
                                    style={text.length >= MAX_LENGTH ? {color: 'red'} : undefined}
                                />
                                <CircularProgress 
                                    style={{color: 'rgba(0,0,0,0.1)'}}
                                    variant="static"
                                    size={20}
                                    thickness={5}
                                    value={100}
                                />
                            </div>
                        </>
                    )}
                    {/*–ö–Ω–æ–ø–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–≤–∏—Ç–∞ */}
                    <Button
                        onClick={handleClickAddTweet}
                        disabled={addFormState === AddFormState.LOADING || !text || text.length >= MAX_LENGTH}
                        color="primary"
                        variant="contained"
                    > 
                        {/*–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–≤–∏—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–≤–∏—Ç–∞ –≥–æ—Ç–æ–≤—ã, —Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–∏—Ç */}
                        {addFormState === AddFormState.LOADING ? (
                            <CircularProgress color="inherit" size={16}/> 
                        ) : ( 
                            'Tweet'
                        )}
                    </Button>
                </div>
            </div> 
            { 
                addFormState === AddFormState.ERROR && (
                <Alert severity="error">
                    Error when adding a tweet{' '}
                    <span aria-label="emoji-plak" role="img">
                        üòû
                    </span>
                </Alert>      
            )}
        </div>
    )
}